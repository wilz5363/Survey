<?php
/**
 * Created by PhpStorm.
 * User: chanw
 * Date: 4/24/2017
 * Time: 11:08 PM
 */

include ('..\phpseclib\crypto.php');
include('..\phpseclib\Math\BigInteger.php');

//$g = new Math_BigInteger(generate1024bit());
//$p = new Math_BigInteger(generate1024bit());
//$d = new Math_BigInteger(generate80bit());
//
//
//
//$g2 = new Math_BigInteger(generate1024bit());
//$p2 = new Math_BigInteger(generate1024bit());
//$d2 = new Math_BigInteger(generate80bit());
//
//$key = generateKey($g,$p, $d);
//$key2 = generateKey($g2,$p2, $d2);

//$session_hash = new Math_BigInteger(1493742403);//answer level

//list($quotient, $remainder) = ($d->add($key))->divide($session_hash);
//$cipherText = new Math_BigInteger($remainder);

//$cipherText = new Math_BigInteger('1477424956',10);

//$K1= new Math_BigInteger('222234762540925641181298995291401432156908619804863382676341366413687169749552121998221735108329589642630898212428508724107651002739941326851392607695284617326705165401231629027075929791574136383095893271314966910440846454124107330048441732538228073310298606647010805488159889987186717629790463800145392514747');
//$K2 = new Math_BigInteger('134301128700557366222343237589769363501281182060177824858218566184992103445451229409545483157820021512690941645781735231048968919742462070806659586038130216480919490288559429289785406786706730676601686847443670230670383105003470375765076488812473952021504444818129109533978980552640916650741952466151639655617');
//$K3 = new Math_BigInteger('523966503090919620737322181592214980896242171979967034187122328260113510693150839523719177548410704746780708272444319440735182185334253367986718755801055975719794825450002355086176731663157301737799298861074428859015916366995964399889566635043046218548368842247108589989599161713993374885326174172210344889930');
//$key = new Math_BigInteger(($K1->add($K2))->add($K3));

//$oriCipher = new Math_BigInteger('22146492');

//$key = new Math_BigInteger('134301128700557366222343237589769363501281182060177824858218566184992103445451229409545483157820021512690941645781735231048968919742462070806659586038130216480919490288559429289785406786706730676601686847443670230670383105003470375765076488812473952021504444818129109533978980552640916650741952466151639655617', 10);


//echo $cipherText."\r\n";
//echo $key."\r\n";
//
//list($quotient2, $remainder2) = ($d2->add($key2))->divide($session_hash);
//$cipherText2 = new Math_BigInteger($remainder2);
//
//echo $cipherText2."\r\n";
//echo $key2."\r\n";
//
//list($quotient4, $remainder4) = ($cipherText->add($cipherText2))->divide($session_hash);
//$addition = new Math_BigInteger($remainder4);
//
//echo $addition."\r\n";

//list($quotient3, $remainder3) = ($oriCipher->subtract($key))->divide($session_hash);
//$count = new Math_BigInteger($remainder3);

//$realPlainText = new Math_BigInteger(1920391);
////$realCipherText = new Math_BigInteger('0');
//
//$g = new Math_BigInteger(generate1024bit());
//$p = new Math_BigInteger(generate1024bit());
//$c = new Math_BigInteger(generate80bit());
//
//
//$realKey = new Math_BigInteger(generateKey($g,$p,$c));
//
//$realHash = new Math_BigInteger(generate1024bithash(), 10);
//
//
////$count = new Math_BigInteger(encryption($realPlainText, $realKey, $realHash));
//
//$count = new Math_BigInteger(encryption($realPlainText, $realKey, $realHash));
//
//echo $realPlainText->value."\r\n";
//echo $realHash->value."\r\n";
//echo $realKey->value."\r\n";
//
//
//echo $count->value."\r\n";
//
//
//$decrypt = decryption($count, $realKey, $realHash);
//echo $decrypt;


//$key2 = new Math_BigInteger('387369146155118836472349161975044345245348384015044242194660358899442879661148055292438959338017672123100275635921472316866906610699356449136915235139373150367122853270435481889505635064666084435150541729308068562074922979023159078680779286839570690896011483706836467833597635972066146354380213742216920028002',10);
//list($quotient, $remainder) = ($cipherText2->subtract($key))->divide($session_hash);
//
//$plainText = new Math_BigInteger($remainder);



//final Testing

//$fs = array();
//$fs[] = new Math_BigInteger('207169178032896864314567892297667976542948286124135750589155992282083462710028558863575850956246469826611473675731087769436223173880359493487095097180031813450274935251904474722445294604298919427087617710606583703429826234749860718816852269920863269179378964363823162536273436759476751736112139590759501457158');
//$fs[] = new Math_BigInteger('392801591852410635520563057928488638662985091547629228714534593745031320375064094570706634776776242904489767775184163894049298700899396827049977493727106499044517172170335482467192291182033531575335957025070163119834749524800987153873412840217734963293524446699927252500371143973711791361113005133636134380450');
//
//$fk = array();
//$fk[] = new Math_BigInteger('1542300803634676814843899373623400767414340779267680737155857611448211792923163163241077110749201931885812258816771309768867298624427341828392665973505317883990791844003439773705402593166714123154559959710157444454698346005250365821267208785202396349043193058857431562626589693709196503961869711892919471399775175633662175570920898258063707532244316627492136591325017099558982408979283251017838501952190138314869490606805428268789463886171416979634401896656190210968005923849141692219106204');
//$fk[] = new Math_BigInteger('452438735891437560046916429170887199735894755449569647466980827434567791607269975138778308327674596264508679106708726855577379361482359181704229960751700670009326466718909085042384199647169552740617330271579304485737670932570789719960839146181556027359843798722257319806737947785785623902779362699253845050830228667778268299518473548011715870624038244202273284653648261572144661260938748767045409855505495187890427339935251341765161867948563010961045521516749524531284081838859754239092505');
//
//$allFs = new Math_BigInteger(0);
//foreach ($fs as $selection){
//    $allFs = $allFs->add($selection);
//}
//
//$allFk = new Math_BigInteger(0);
//foreach ($fk as $key){
//    $allFk = $allFk->add($key);
//}
//
//echo $allFs."\r\n";
//echo $allFk."\r\n";
//
//$hash = new Math_BigInteger('638975464657598178050159193615840333621285000981541698946343141685776562965794234323828684752160499333100893089319010834710291726723047469458127762623912179077591389350349461529619132014984147096702699481199350221183582723735954349920613580079004632047989996198224555991250695901854465891999677598803072482457');
//
//$testDecrypt = new Math_BigInteger(decryption($allFs, $allFk, $hash));

//echo $testDecrypt;




$key = new Math_BigInteger('6685520472568496999167451975853353221392816348914587140772295035906511472456041873809513592311293029615150591952120489195273917742096599030467035619040094620576742309384908824565662581073371127463019610038920362280129531502136344041070803549045615201339039488148908500717156561297944784105673392154337183329192120078960038743358601680743059776331801831583367552967679728725652682969293528141083318751994767787687110834784286690411112479371526485609296606240910855616296190200328950025282471');
$text = new Math_BigInteger('1035220869979044612957993400253540821743509712737799538495615484767240508083959973439409637553497059209894623803988341407083748931731499864391311974025773155008228653450702597827015312709958773136690214453572747293354970799399259774111421989478025950725956060768774271974221528238870538957058590525656704435791');
$hash = new Math_BigInteger('500787073352303997519950800893823886154124557832940374064185742098031908343484471985260895830216797437693092738636086964609012970200283003129917166890654003431962611320605684859022228540348412277458386449938309239450175388529171090858382204687632904160811973369491635949527856453793959207808164579742585303067');

list($quotient, $remainder) = ($text->subtract($key))->divide($hash);
echo $remainder;

















